name: Deploy P3 Lambda File Processor

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: P3-lambda-file-processor
  TERRAFORM_VERSION: 1.6.0

jobs:
  validate:
    name: Validate Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Create Lambda package for validation
        run: |
          cd lambda-code
          echo "ðŸ“¦ Creating Lambda package for validation..."
          rm -rf lambda_function.zip *.dist-info/ __pycache__/
          zip lambda_function.zip lambda_function.py
          ls -la lambda_function.zip

      - name: Test Lambda function syntax
        run: |
          cd lambda-code
          python -c "import lambda_function; print('âœ… Lambda function syntax is valid')"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Validate
        run: |
          cd terraform
          terraform init -backend=false
          terraform validate

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/dev' || github.event_name == 'workflow_dispatch'
    environment: dev
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Package Lambda function FIRST
        run: |
          cd lambda-code
          echo "ðŸ“¦ Creating Lambda deployment package..."
          
          # Clean up any existing packages
          rm -rf lambda_function.zip *.dist-info/ __pycache__/ PIL/ Pillow*
          
          # Install basic dependencies
          pip install boto3 -t . --no-deps
          
          # Create deployment package
          zip -r lambda_function.zip . -x "*.pyc" "__pycache__/*" "*.git*" "requirements.txt"
          
          # Verify package exists and show size
          ls -lh lambda_function.zip
          echo "âœ… Lambda package created successfully"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan \
            -var="notification_email=${{ secrets.NOTIFICATION_EMAIL || 'test@example.com' }}" \
            -var="environment=dev"

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve \
            -var="notification_email=${{ secrets.NOTIFICATION_EMAIL || 'test@example.com' }}" \
            -var="environment=dev"

      - name: Test deployment
        run: |
          cd terraform
          echo "ðŸ§ª Testing Development Deployment..."
          
          # Test outputs
          terraform output || echo "No outputs available"
          
          # Test Lambda function directly
          aws lambda invoke \
            --function-name "P3-lambda-file-processor" \
            --payload '{"test": "GitHub Actions deployment"}' \
            response.json || echo "Lambda invoke failed"
          
          if [ -f response.json ]; then
            echo "Lambda Response:"
            cat response.json
          fi
          
          echo "âœ… Development testing completed!"

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Package Lambda function FIRST
        run: |
          cd lambda-code
          echo "ðŸ“¦ Creating Production Lambda package..."
          
          # Clean up
          rm -rf lambda_function.zip *.dist-info/ __pycache__/ PIL/ Pillow*
          
          # Install dependencies
          pip install boto3 -t . --no-deps
          
          # Create package
          zip -r lambda_function.zip . -x "*.pyc" "__pycache__/*" "*.git*" "requirements.txt"
          
          ls -lh lambda_function.zip
          echo "âœ… Production Lambda package created"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan \
            -var="notification_email=${{ secrets.NOTIFICATION_EMAIL || 'admin@example.com' }}" \
            -var="environment=prod"

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve \
            -var="notification_email=${{ secrets.NOTIFICATION_EMAIL || 'admin@example.com' }}" \
            -var="environment=prod"

      - name: Test production deployment
        run: |
          echo "ðŸš€ Production deployment completed successfully!"
          
          # Test Lambda
          aws lambda invoke \
            --function-name "P3-lambda-file-processor" \
            --payload '{"test": "Production deployment"}' \
            response.json || echo "Lambda invoke failed"
          
          if [ -f response.json ]; then
            echo "Lambda Response:"
            cat response.json
          fi
