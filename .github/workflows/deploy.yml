name: Deploy P3 Lambda File Processor

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]
  workflow_dispatch:  # Manual trigger

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: P3-lambda-file-processor
  TERRAFORM_VERSION: 1.6.0

jobs:
  # Validate and test code
  validate:
    name: Validate Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        run: |
          cd lambda-code
          pip install -r requirements.txt

      - name: Test Lambda function syntax
        run: |
          cd lambda-code
          python -c "import lambda_function; print('✅ Lambda function syntax is valid')"

      - name: Lint Python code
        run: |
          pip install flake8
          cd lambda-code
          flake8 lambda_function.py --max-line-length=100 --ignore=E501 || echo "Linting completed with warnings"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Create Lambda package for validation
        run: |
          cd lambda-code
          rm -rf lambda_function.zip *.dist-info/ __pycache__/
          zip lambda_function.zip lambda_function.py

      - name: Terraform Format Check
        run: |
          cd terraform
          terraform fmt -check || echo "Terraform formatting check completed"

      - name: Terraform Validate
        run: |
          cd terraform
          terraform init -backend=false
          terraform validate

  # Deploy to development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/dev' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    environment: dev
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Package Lambda function
        run: |
          cd lambda-code
          echo "📦 Creating Lambda deployment package..."
          
          # Clean up any existing packages
          rm -rf lambda_function.zip *.dist-info/ __pycache__/ PIL/ Pillow*
          
          # Install dependencies to current directory
          pip install -r requirements.txt -t . --no-deps
          
          # Create deployment package
          zip -r lambda_function.zip . -x "*.pyc" "__pycache__/*" "*.git*" "requirements.txt"
          
          # Verify package
          ls -lh lambda_function.zip
          echo "✅ Lambda package created: $(ls -lh lambda_function.zip | awk '{print $5}')"

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          terraform plan \
            -var="notification_email=${{ secrets.NOTIFICATION_EMAIL || 'test@example.com' }}" \
            -var="environment=dev" \
            -out=tfplan-dev
          echo "plan-output<<EOF" >> $GITHUB_OUTPUT
          terraform show -no-color tfplan-dev >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment Terraform Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Plan 📖
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${{ steps.plan.outputs.plan-output }}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply tfplan-dev

      - name: Test deployment
        run: |
          cd terraform
          
          echo "🧪 Testing Development Deployment..."
          
          # Get outputs with error handling
          S3_BUCKET=$(terraform output -raw s3_bucket_name 2>/dev/null || echo "p3-lambda-file-processor-uploads")
          API_URL=$(terraform output -raw api_gateway_url 2>/dev/null || echo "")
          LAMBDA_NAME=$(terraform output -raw lambda_function_name 2>/dev/null || echo "P3-lambda-file-processor")
          
          echo "📊 Deployment Outputs:"
          echo "  S3 Bucket: $S3_BUCKET"
          echo "  API URL: $API_URL"
          echo "  Lambda: $LAMBDA_NAME"
          
          # Test S3 upload
          echo "Testing S3 upload..."
          echo "GitHub Actions DEV deployment test $(date)" > test-deploy-dev.txt
          aws s3 cp test-deploy-dev.txt s3://$S3_BUCKET/github-actions-test/ || echo "S3 upload failed"
          
          # Test API Gateway
          if [ ! -z "$API_URL" ]; then
            echo "Testing API Gateway..."
            response=$(curl -s -X POST "$API_URL" \
              -H "Content-Type: application/json" \
              -d '{"test": "GitHub Actions deployment", "environment": "development", "timestamp": "'$(date)'"}' || echo "API test failed")
            echo "API Response: $response"
          fi
          
          # Test Lambda direct invoke
          echo "Testing Lambda direct invoke..."
          aws lambda invoke \
            --function-name "$LAMBDA_NAME" \
            --payload '{"test": "direct invoke", "environment": "dev"}' \
            response-dev.json || echo "Lambda invoke failed"
          
          if [ -f response-dev.json ]; then
            echo "Lambda Response:"
            cat response-dev.json
          fi
          
          echo "✅ Development testing completed!"

  # Deploy to production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Package Lambda function
        run: |
          cd lambda-code
          echo "📦 Creating Production Lambda package..."
          
          # Clean up any existing packages
          rm -rf lambda_function.zip *.dist-info/ __pycache__/ PIL/ Pillow*
          
          # Install dependencies
          pip install -r requirements.txt -t . --no-deps
          
          # Create production deployment package
          zip -r lambda_function.zip . -x "*.pyc" "__pycache__/*" "*.git*" "requirements.txt"
          
          # Verify package
          ls -lh lambda_function.zip
          echo "✅ Production Lambda package created"

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan \
            -var="notification_email=${{ secrets.NOTIFICATION_EMAIL || 'admin@example.com' }}" \
            -var="environment=prod" \
            -out=tfplan-prod

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply tfplan-prod

      - name: Test production deployment
        run: |
          cd terraform
          
          echo "🚀 Testing Production Deployment..."
          
          # Get outputs
          S3_BUCKET=$(terraform output -raw s3_bucket_name 2>/dev/null || echo "p3-lambda-file-processor-uploads")
          API_URL=$(terraform output -raw api_gateway_url 2>/dev/null || echo "")
          LAMBDA_NAME=$(terraform output -raw lambda_function_name 2>/dev/null || echo "P3-lambda-file-processor")
          
          echo "📊 Production Deployment Outputs:"
          echo "  S3 Bucket: $S3_BUCKET"
          echo "  API URL: $API_URL"
          echo "  Lambda: $LAMBDA_NAME"
          
          # Test S3 upload
          echo "Testing S3 upload..."
          echo "GitHub Actions PRODUCTION deployment $(date)" > prod-test.txt
          aws s3 cp prod-test.txt s3://$S3_BUCKET/production-test/ || echo "S3 upload failed"
          
          # Test API Gateway
          if [ ! -z "$API_URL" ]; then
            echo "Testing API Gateway..."
            response=$(curl -s -X POST "$API_URL" \
              -H "Content-Type: application/json" \
              -d '{"test": "Production deployment", "environment": "production", "timestamp": "'$(date)'"}' || echo "API test failed")
            echo "API Response: $response"
          fi
          
          # Verify Lambda function
          echo "Verifying Lambda function..."
          aws lambda get-function --function-name $LAMBDA_NAME --query 'Configuration.[FunctionName,Runtime,LastModified]' --output table || echo "Lambda verification failed"
          
          # Test Lambda direct invoke
          echo "Testing Lambda direct invoke..."
          aws lambda invoke \
            --function-name "$LAMBDA_NAME" \
            --payload '{"test": "production direct invoke", "environment": "prod"}' \
            response-prod.json || echo "Lambda invoke failed"
          
          if [ -f response-prod.json ]; then
            echo "Lambda Response:"
            cat response-prod.json
          fi
          
          echo "✅ Production deployment and testing completed!"

      - name: Notify deployment success
        if: success()
        run: |
          echo "🚀 Production deployment completed successfully!"
          echo "📧 Check your email for processing notifications"
          echo "🌐 API Gateway URL: $(cd terraform && terraform output -raw api_gateway_url 2>/dev/null || echo 'Check AWS Console')"

      - name: Post deployment cleanup
        if: always()
        run: |
          # Clean up temporary files
          rm -f terraform/tfplan-* terraform/response-*.json lambda-code/test-*.txt

  # Security and monitoring check
  security-check:
    name: Security & Monitoring Check
    runs-on: ubuntu-latest
    needs: [deploy-dev]
    if: github.ref == 'refs/heads/dev' || github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check Lambda security settings
        run: |
          echo "🔐 Checking Lambda security settings..."
          LAMBDA_NAME="P3-lambda-file-processor"
          
          # Check Lambda configuration
          aws lambda get-function-configuration \
            --function-name $LAMBDA_NAME \
            --query '{FunctionName:FunctionName,Runtime:Runtime,Timeout:Timeout,MemorySize:MemorySize}' \
            --output table || echo "Lambda security check failed"
          
          # Check IAM role
          ROLE_ARN=$(aws lambda get-function-configuration --function-name $LAMBDA_NAME --query 'Role' --output text)
          echo "Lambda IAM Role: $ROLE_ARN"

      - name: Monitor CloudWatch logs
        run: |
          echo "📊 Checking CloudWatch logs..."
          LOG_GROUP="/aws/lambda/P3-lambda-file-processor"
          
          # Check if log group exists and get recent logs
          aws logs describe-log-groups \
            --log-group-name-prefix $LOG_GROUP \
            --query 'logGroups[0].{LogGroupName:logGroupName,CreationTime:creationTime,StoredBytes:storedBytes}' \
            --output table || echo "Log group not found"

  # Cleanup on PR close (optional - commented out for safety)
  # cleanup:
  #   name: Cleanup Development Environment
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'pull_request' && github.event.action == 'closed'
  #   
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION }}
  #
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: ${{ env.TERRAFORM_VERSION }}
  #
  #     - name: Terraform Destroy (Development)
  #       run: |
  #         cd terraform
  #         terraform init
  #         terraform destroy -auto-approve \
  #           -var="notification_email=${{ secrets.NOTIFICATION_EMAIL }}" \
  #           -var="environment=dev"
