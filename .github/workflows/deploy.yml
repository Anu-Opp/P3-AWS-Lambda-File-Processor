name: Deploy P3 Lambda File Processor

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: P3-lambda-file-processor

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          cd lambda-code
          pip install -r requirements.txt

      - name: Validate Lambda function
        run: |
          cd lambda-code
          python -c "import lambda_function; print('Lambda function syntax is valid')"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Package Lambda function
        run: |
          cd lambda-code
          pip install -r requirements.txt -t .
          zip -r lambda_function.zip . -x "*.pyc" "__pycache__/*" "tests/*" "lambda_function_basic_backup.py"

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -var="notification_email=${{ secrets.NOTIFICATION_EMAIL }}"

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve -var="notification_email=${{ secrets.NOTIFICATION_EMAIL }}"

      - name: Test deployment
        run: |
          cd terraform
          API_URL=$(terraform output -raw api_gateway_url)
          S3_BUCKET=$(terraform output -raw s3_bucket_name)
          
          echo "Testing API Gateway: $API_URL"
          curl -X POST "$API_URL" \
            -H "Content-Type: application/json" \
            -d '{"test": "GitHub Actions deployment test", "timestamp": "'$(date)'"}'
          
          echo "Testing S3 upload to: $S3_BUCKET"
          echo "GitHub Actions test file - $(date)" > test-deploy.txt
          aws s3 cp test-deploy.txt s3://$S3_BUCKET/github-actions-test/

      - name: Output deployment info
        run: |
          cd terraform
          echo "Deployment completed successfully!"
          echo "API Gateway URL: $(terraform output -raw api_gateway_url)"
          echo "S3 Bucket: $(terraform output -raw s3_bucket_name)"
          echo "Lambda Function: $(terraform output -raw lambda_function_name)"
